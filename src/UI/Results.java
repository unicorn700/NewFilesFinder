/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Results.java
 *
 * Created on Jan 1, 2013, 11:12:15 PM
 */

package UI;

import java.awt.Component;
import java.awt.Desktop;
import java.awt.Toolkit;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.File;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;
import javax.swing.Icon;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.filechooser.FileSystemView;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import newfilefinder.Operations;

/**
 *
 * @author unicorn
 */
public class Results extends javax.swing.JDialog {


    DefaultTableModel model;
    private static ArrayList<File> all;
    public final static int FILE_MODE_SINGLE= 0;
    public final static int FILE_MODE_MULTIPLE= 1;
    public final static int OS_WINDOWS= 1;
    public final static int OS_OTHERS= 2;
    public static int OS_TYPE;

    /** Creates new form Results */
    public Results(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        initUI();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        jList2.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jList2);

        jMenuItem1.setText("open");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem1);

        jMenuItem5.setText("open selected");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem5);

        jMenuItem2.setText("copy");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem2);

        jMenuItem3.setText("cut");
        jPopupMenu1.add(jMenuItem3);

        jMenuItem4.setText("delete");
        jPopupMenu1.add(jMenuItem4);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jButton1.setText("Copy Selected");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Copy all");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Finished");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "File Name", "Size", "Type", "Path"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jTable1.setShowVerticalLines(false);
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(55, 55, 55)
                .addComponent(jButton2)
                .addGap(72, 72, 72)
                .addComponent(jButton3)
                .addGap(155, 155, 155))
            .addComponent(jScrollPane1)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        /*int i=jTable1.getSelectedRow();
        try {
            Desktop.getDesktop().open(new File(((DefaultTableModel)
                    jTable1.getModel()).getValueAt(i, 3).toString()));
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
        */
        openFile of=new openFile(FILE_MODE_SINGLE,OS_TYPE);
        Thread th=new Thread(of);
        th.start();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
         final List<File> files = new ArrayList<File>();
        // ... code to fill list omitted ... //
        files.add(all.get(jTable1.getSelectedRow()));
        Toolkit.getDefaultToolkit().getSystemClipboard().setContents(
            new Transferable() {
        @Override
        public DataFlavor[] getTransferDataFlavors() {
            return new DataFlavor[] { DataFlavor.javaFileListFlavor };
        }

        @Override
        public boolean isDataFlavorSupported(DataFlavor flavor) {
            return DataFlavor.javaFileListFlavor.equals(flavor);
        }

        @Override
        public Object getTransferData(DataFlavor flavor) throws UnsupportedFlavorException, IOException {
            return files;
        }
    }, null
);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        final List<File> files = new ArrayList<File>();
        // ... code to fill list omitted ... //
         int[] selection = jTable1.getSelectedRows();
         for(int i = 0; i< selection.length;i++)
         {
             files.add(all.get(selection[i]));
         }

        Toolkit.getDefaultToolkit().getSystemClipboard().setContents(
            new Transferable() {
        @Override
        public DataFlavor[] getTransferDataFlavors() {
            return new DataFlavor[] { DataFlavor.javaFileListFlavor };
        }

        @Override
        public boolean isDataFlavorSupported(DataFlavor flavor) {
            return DataFlavor.javaFileListFlavor.equals(flavor);
        }

        @Override
        public Object getTransferData(DataFlavor flavor) throws UnsupportedFlavorException, IOException {
            return files;
        }
    }, null
);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
        final List<File> files = new ArrayList(all);
       
        Toolkit.getDefaultToolkit().getSystemClipboard().setContents(
            new Transferable() {
        @Override
        public DataFlavor[] getTransferDataFlavors() {
            return new DataFlavor[] { DataFlavor.javaFileListFlavor };
        }

        @Override
        public boolean isDataFlavorSupported(DataFlavor flavor) {
            return DataFlavor.javaFileListFlavor.equals(flavor);
        }

        @Override
        public Object getTransferData(DataFlavor flavor) throws UnsupportedFlavorException, IOException {
            return files;
        }
    }, null
);
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
       
            
        openFile of=new openFile(FILE_MODE_MULTIPLE,OS_TYPE);
        Thread th=new Thread(of);
        th.start();
        
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Results dialog = new Results(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JList jList2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables


    public class  showresult extends Thread
    {
        @Override
        public void run(){


         jTable1.setComponentPopupMenu(jPopupMenu1);
       //table properties
       // jTable1.setComponentPopupMenu(jPopupMenu1);
        model =(DefaultTableModel)jTable1.getModel();
        jTable1.getColumnModel().getColumn(0).setCellRenderer(new MyTableCellRenderer());
        jTable1.getColumnModel().getColumn(1).setCellRenderer(new MyTableCellRenderer());
        jTable1.setAutoCreateRowSorter(true);
        jTable1.getColumnModel().getColumn(2).setPreferredWidth(2);
        jTable1.getColumnModel().getColumn(1).setPreferredWidth(2);

        all= Operations.showResult();
        model.setRowCount(all.size());
       
        for(int i=0;i<all.size();i++)
        {
            model.setValueAt(all.get(i), i, 0);
            model.setValueAt(all.get(i).length(), i, 1);
            model.setValueAt(getExtension(all.get(i)), i, 2);
            model.setValueAt(all.get(i).getPath(), i, 3);
        }

        
    }

     public  String getExtension(File f)
     {
        String ext = null;
        String s = f.getName();
        int i = s.lastIndexOf('.');

        if (i > 0 &&  i < s.length() - 1) {
             ext = s.substring(i+1).toLowerCase();
         }
        if(ext == null) {
             ext = "unknown";
         }
        return ext;
     }
    }

    public class MyTableCellRenderer extends DefaultTableCellRenderer
    {

        public MyTableCellRenderer() {
            super();
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value,
    		boolean isSelected, boolean hasFocus, int row, int column) {

    	JLabel label = (JLabel)super.getTableCellRendererComponent(table,
                value, isSelected, hasFocus, row, column);

    	if(column == 0)
        {
            File status = (File)value;
            Icon icon = FileSystemView.getFileSystemView().getSystemIcon(status);
            if(icon == null)
            {
                if(status != null) {
                    label.setText(status.getName());
                }
            }
            else
            {
                label.setIcon(icon);
                label.setText(status.getName());
            }
    	}
        else if(column == 1)
        {
            Long status = (Long)value;
            //System.out.println(status+"");
             label.setText(sizer(status));
        }
    	return label;
        }
    }

 public String sizer(Long size)
{
    String retval;
    double newsize;
    newsize=(double) (size / 1024.00);
    newsize=roundTwoDecimals(newsize);
    if(newsize>1000)
    {
        newsize=(double) (newsize / 1024.00);
        newsize=roundTwoDecimals(newsize);
        retval=newsize+" MB";
    }
     else
    {
        retval=newsize+" KB";
     }
    return retval;
}

   double roundTwoDecimals(double d)
    {
        DecimalFormat twoDForm = new DecimalFormat("#.##");
        return Double.valueOf(twoDForm.format(d));
    }

     private void initUI()
     {
        
        String os_type = System.getProperty("os.name").toLowerCase();
        if(os_type.indexOf("win") != -1)
        {
            Results.OS_TYPE = OS_WINDOWS;  
        }
        else {
             Results.OS_TYPE = OS_OTHERS;
         }
        if(OS_TYPE == OS_OTHERS)
        {
            jMenuItem5.setEnabled(false);
        }
        showresult sw=new showresult();
        Thread th=new Thread(sw);
        th.start();
     }
     
    public class  openFile extends Thread
    {
        int mode;
        int os;
        public openFile(int mode,int os)
        {
            this.mode = mode;
            this.os = os;
        }
        @Override
        public void run(){
            System.out.println("OS_TYPE = "+os);
            System.out.println("FILE_MODe = "+mode);
            if(mode == FILE_MODE_MULTIPLE && os == OS_WINDOWS)
            {
                ArrayList<File> selectedFiles = new ArrayList<File>();
                int[] selectedRows = jTable1.getSelectedRows();
                for(int i=0;i<selectedRows.length;i++)
                {
                    selectedFiles.add(all.get(selectedRows[i]));            
                }
                
                StringBuilder filepathList = new StringBuilder();
                for (int i=0;i<selectedFiles.size();i++){
                String filepath = selectedFiles.get(i).getAbsolutePath();
                    filepathList.append("\"").append(filepath).append("\" ");
                }
                
                System.out.println(filepathList.toString());
                try {
                Runtime.getRuntime().exec("rundll32 SHELL32.DLL,ShellExec_RunDLL " + filepathList.toString());
                } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
                }

                              
            }
            else if(os == OS_OTHERS)
            {       
                int i=jTable1.getSelectedRow();
                try 
                {
                        Desktop.getDesktop().open(new File(((DefaultTableModel)
                    jTable1.getModel()).getValueAt(i, 3).toString()));
                }
                catch (Exception e)
                {
                           System.out.println(e.getMessage());
                }
            }
            else if(os == OS_WINDOWS)
            {
                try {
                Runtime.getRuntime().exec("rundll32 SHELL32.DLL,ShellExec_RunDLL"
                        + " " + all.get(jTable1.getSelectedRow()).getAbsolutePath());
                } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
                }
            }
                        
        }
     }
}
